package com.piggymetrics.experience.config;

import feign.RequestInterceptor;
import feign.RequestTemplate;
import org.springframework.http.HttpHeaders;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;
import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;

import java.util.Collections;
import java.util.List;
import java.util.Map;

public class OAuth2FeignRequestInterceptor implements RequestInterceptor {
//    private final OAuth2AuthorizedClientManager authorizedClientManager;
//    public String CLIENT_REGISTRATION_ID = "accounts-client-client-credentials";
    private final OAuth2AuthorizedClientService oAuth2AuthorizedClientService;
    public OAuth2FeignRequestInterceptor(OAuth2AuthorizedClientService oAuth2AuthorizedClientService) {
        this.oAuth2AuthorizedClientService = oAuth2AuthorizedClientService;
    }
    @Override
    public void apply(RequestTemplate requestTemplate) {
        requestTemplate.headers(Map.of(HttpHeaders.AUTHORIZATION, getAccessToken()));
    }

    //Access token generated by spring via current authentication with oauth server
    private List<String> getAccessToken(){
        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            OAuth2AuthenticationToken oAuth2AuthenticationToken = (OAuth2AuthenticationToken) authentication;
            OAuth2AuthorizedClient oAuth2AuthorizedClient = oAuth2AuthorizedClientService
                    .loadAuthorizedClient(oAuth2AuthenticationToken.getAuthorizedClientRegistrationId(), oAuth2AuthenticationToken.getName());
            return Collections.singletonList(String.format("%s %s", oAuth2AuthorizedClient.getAccessToken().getTokenType().getValue(), oAuth2AuthorizedClient.getAccessToken().getTokenValue()));
        } catch (Exception exp) {
            System.out.println("client credentials error " + exp.getMessage());
        }
        return null;
    }

    //auth type client credentials
/*    private List<String> getAuthorizationToken() {
        try {
            OAuth2AuthorizeRequest oAuth2AuthorizeRequest = OAuth2AuthorizeRequest
                    .withClientRegistrationId(CLIENT_REGISTRATION_ID)
                    .principal(SecurityContextHolder.getContext().getAuthentication())
                    .build();
            OAuth2AuthorizedClient client = authorizedClientManager.authorize(oAuth2AuthorizeRequest);
            if (isNull(client)) {
                throw new IllegalStateException("client credentials flow on " + CLIENT_REGISTRATION_ID + " failed, client is null");
            }
            return Arrays.asList(String.format("%s %s", client.getAccessToken().getTokenType().getValue(), client.getAccessToken().getTokenValue()));
        } catch (Exception exp) {
            System.out.println("client credentials error " + exp.getMessage());
        }
        return null;
    }*/
    //Bearer token attached in incoming request
/*    private List<String> getBearerTokenHeader() {
        try {
            HttpServletRequest httpServletRequest = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
            if(isNull(httpServletRequest)){
                throw new IllegalStateException("Bearer access token is required");
            }
            return Arrays.asList(String.format("%s", httpServletRequest.getHeader(HttpHeaders.AUTHORIZATION)));
        } catch(Exception e){
            System.out.println("Bearer access token error " + e.getMessage());
        }
        return null;
    }*/
}
