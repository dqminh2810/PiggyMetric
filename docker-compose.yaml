version: '3'
services:
  ###SPRING BOOT###
  config:
    profiles: ["ms"]
    build: config
    container_name: config
    hostname: config
    restart: always
    ports:
      - 8888:8888
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://config:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  auth-service:
    profiles: ["ms"]
    build: auth-service
    container_name: auth-service
    hostname: auth-service
    restart: always
    ports:
      - 9000:9000
    depends_on:
      config:
        condition: service_healthy
    #      - registry
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://auth-service:9000/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
#  registry:
#    build: registry
#    container_name: registry
#    hostname: registry
#    restart: always
#    ports:
#      - 8761:8761
#    depends_on:
#      - config
  account-service:
    profiles: ["ms"]
    build: account-service
    container_name: account-service
    hostname: account-service
    restart: always
    ports:
      - 8081:8081
    links:
      - account-mongodb
    depends_on:
      config:
        condition: service_healthy
      #      - registry
      auth-service:
        condition: service_healthy
      account-mongodb:
        condition: service_started
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://account-service:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  notification-service:
    profiles: ["ms"]
    build: notification-service
    container_name: notification-service
    hostname: notification-service
    restart: always
    ports:
      - 8082:8082
    links:
      - notification-mongodb
    depends_on:
      config:
        condition: service_healthy
      #      - registry
      auth-service:
        condition: service_healthy
      notification-mongodb:
        condition: service_started
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://notification-service:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  statistic-service:
    profiles: ["ms"]
    build: statistic-service
    container_name: statistic-service
    hostname: statistic-service
    restart: always
    ports:
      - 8083:8083
    links:
      - statistic-mongodb
    depends_on:
      config:
        condition: service_healthy
      #      - registry
      auth-service:
        condition: service_healthy
      statistic-mongodb:
        condition: service_started
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://statistic-service:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  experience-service:
    profiles: ["ms"]
    build: experience-service
    container_name: experience-service
    hostname: experience-service
    restart: always
    ports:
      - 8080:8080
    depends_on:
      config:
        condition: service_healthy
      #      - registry
      auth-service:
        condition: service_healthy
      account-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
      statistic-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://experience-service:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  gateway:
    profiles: ["ms"]
    build: gateway
    container_name: gateway
    hostname: gateway
    restart: always
    ports:
      - 8000:8000
    depends_on:
      config:
        condition: service_healthy
#      - registry
      experience-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://gateway:8000/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  ###MONGODB###
  account-mongodb:
    profiles: ["db"]
    build:
      context: .
      dockerfile: mongodb/Dockerfile
    container_name: account-mongodb
    hostname: account-mongodb
    restart: unless-stopped
    ports:
      - 25000:27017
    volumes:
      - ./mongodb/accountdb:/data/db
    environment:
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE_MS_ACCOUNT-account}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME-user}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD-password}
      - INIT_DUMP=${INIT_DUMP_MS_ACCOUNT-account-service-dump.js}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME-default}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID-default}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY-default}
  notification-mongodb:
    profiles: ["db"]
    build:
      context: .
      dockerfile: mongodb/Dockerfile
    container_name: notification-mongodb
    hostname: notification-mongodb
    restart: unless-stopped
    ports:
      - 26000:27017
    volumes:
      - ./mongodb/notificationdb:/data/db
    environment:
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE_MS_NOTIFICATION-notification}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME-user}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD-password}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME-default}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID-default}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY-default}
  statistic-mongodb:
    profiles: ["db"]
    build:
      context: .
      dockerfile: mongodb/Dockerfile
    container_name: statistic-mongodb
    hostname: statistic-mongodb
    restart: unless-stopped
    ports:
      - 27000:27017
    volumes:
      - ./mongodb/statisticdb:/data/db
    environment:
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE_MS_STATISTIC-statistic}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME-user}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD-password}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME-default}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID-default}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY-default}

volumes:
  mongodb: